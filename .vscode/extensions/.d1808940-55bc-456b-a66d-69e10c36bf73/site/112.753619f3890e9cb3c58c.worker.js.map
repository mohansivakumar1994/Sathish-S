{"version":3,"sources":["../node_modules/prismjs/components/prism-http.js"],"names":["Prism","languages","http","request-line","pattern","inside","property","attr-name","response-status","lookbehind","header-name","alias","httpLanguages","application/json","javascript","application/xml","markup","text/xml","text/html","contentType","options","RegExp","rest","insertBefore"],"mappings":"2CAAAA,MAAAC,UAAAC,KAAA,CACAC,eAAA,CACAC,QAAA,8FACAC,OAAA,CAEAC,SAAA,yDAEAC,YAAA,SAGAC,kBAAA,CACAJ,QAAA,uBACAC,OAAA,CAEAC,SAAA,CACAF,QAAA,yBACAK,YAAA,KAKAC,cAAA,CACAN,QAAA,iBACAO,MAAA,YAIA,IAAAC,EAAA,CACAC,mBAAAb,MAAAC,UAAAa,WACAC,kBAAAf,MAAAC,UAAAe,OACAC,WAAAjB,MAAAC,UAAAe,OACAE,YAAAlB,MAAAC,UAAAe,QAIA,QAAAG,KAAAP,EACA,GAAAA,EAAAO,GAAA,CACA,IAAAC,EAAA,GACAA,EAAAD,GAAA,CACAf,QAAA,IAAAiB,OAAA,qBAAAF,EAAA,yCAA6F,KAC7FV,YAAA,EACAJ,OAAA,CACAiB,KAAAV,EAAAO,KAGAnB,MAAAC,UAAAsB,aAAA,qBAAAH","file":"112.753619f3890e9cb3c58c.worker.js","sourcesContent":["Prism.languages.http = {\n  'request-line': {\n    pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n    inside: {\n      // HTTP Verb\n      property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n      // Path or query argument\n      'attr-name': /:\\w+/\n    }\n  },\n  'response-status': {\n    pattern: /^HTTP\\/1.[01] \\d+.*/m,\n    inside: {\n      // Status, e.g. 200 OK\n      property: {\n        pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n        lookbehind: true\n      }\n    }\n  },\n  // HTTP header name\n  'header-name': {\n    pattern: /^[\\w-]+:(?=.)/m,\n    alias: 'keyword'\n  }\n}; // Create a mapping of Content-Type headers to language definitions\n\nvar httpLanguages = {\n  'application/json': Prism.languages.javascript,\n  'application/xml': Prism.languages.markup,\n  'text/xml': Prism.languages.markup,\n  'text/html': Prism.languages.markup\n}; // Insert each content type parser that has its associated language\n// currently loaded.\n\nfor (var contentType in httpLanguages) {\n  if (httpLanguages[contentType]) {\n    var options = {};\n    options[contentType] = {\n      pattern: new RegExp('(content-type:\\\\s*' + contentType + '[\\\\w\\\\W]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\w\\\\W]*', 'i'),\n      lookbehind: true,\n      inside: {\n        rest: httpLanguages[contentType]\n      }\n    };\n    Prism.languages.insertBefore('http', 'header-name', options);\n  }\n}"],"sourceRoot":""}