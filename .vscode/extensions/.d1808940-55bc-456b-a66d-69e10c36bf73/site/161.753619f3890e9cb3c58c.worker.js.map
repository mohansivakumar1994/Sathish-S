{"version":3,"sources":["../node_modules/prismjs/components/prism-markup-templating.min.js"],"names":["Prism","languages","Object","defineProperties","buildPlaceholders","value","e","t","n","a","language","tokenStack","code","replace","r","length","indexOf","toUpperCase","grammar","markup","tokenizePlaceholders","keys","o","i","g","content","c","s","l","p","f","u","substring","_","Token","tokenize","k","filter","Array","prototype","splice","apply","concat","tokens"],"mappings":"2CAAAA,MAAAC,UAAA,wBAAyCC,OAAAC,iBAAAH,MAAAC,UAAA,sBACzCG,kBAAA,CACAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAH,EAAAI,WAAAH,IAAAD,EAAAK,WAAA,GAAAL,EAAAM,KAAAN,EAAAM,KAAAC,QAAAL,EAAA,SAAAA,GACA,sBAAAC,MAAAD,GAAA,OAAAA,EAEA,QAAAM,EAAAR,EAAAK,WAAAI,QAAyC,IAAAT,EAAAM,KAAAI,QAAA,MAAAT,EAAAU,cAAAH,EAAA,UACzCA,EAGA,OAAAR,EAAAK,WAAAG,GAAAN,EAAA,MAAAD,EAAAU,cAAAH,EAAA,QACOR,EAAAY,QAAAlB,MAAAC,UAAAkB,UAGPC,qBAAA,CACAf,MAAA,SAAAC,EAAAC,GACA,GAAAD,EAAAI,WAAAH,GAAAD,EAAAK,WAAA,CACAL,EAAAY,QAAAlB,MAAAC,UAAAM,GAEA,IAAAC,EAAA,EACAC,EAAAP,OAAAmB,KAAAf,EAAAK,aACA,SAAAG,EAAAQ,GACA,KAAAd,GAAAC,EAAAM,QAAA,QAAAQ,EAAA,EAA+CA,EAAAD,EAAAP,OAAcQ,IAAA,CAC7D,IAAAC,EAAAF,EAAAC,GAEA,oBAAAC,KAAAC,SAAA,iBAAAD,EAAAC,QAAA,CACA,IAAAC,EAAAjB,EAAAD,GACAmB,EAAArB,EAAAK,WAAAe,GACAE,EAAA,iBAAAJ,MAAAC,QACAI,EAAAD,EAAAZ,QAAA,MAAAT,EAAAU,cAAAS,EAAA,OAEA,GAAAG,GAAA,KACArB,EAEA,IAAAsB,EACAC,EAAAH,EAAAI,UAAA,EAAAH,GACAI,EAAA,IAAAjC,MAAAkC,MAAA3B,EAAAP,MAAAmC,SAAAR,EAAArB,EAAAY,QAAAX,GAAA,YAAAA,EAAAoB,GACAS,EAAAR,EAAAI,UAAAH,GAAA,MAAAtB,EAAAU,cAAAS,EAAA,OAAAX,QAEA,GAAAgB,GAAAK,EAEiBtB,EAFjBgB,EAAA,CAAAC,EAAAE,EAAAG,GAAAC,OAAA,SAAA/B,GACA,QAAAA,KACiBwB,EAAAG,EAAA,iBAAAT,EAAAc,MAAAC,UAAAC,OAAAC,MAAAnB,EAAA,CAAAC,EAAA,GAAAmB,OAAAZ,IAAAN,EAAAC,QAAAK,EAAAtB,GAAAC,EAAAM,OAAA,YAEJS,EAAAC,SAAA,iBAAAD,EAAAC,SAAAX,EAAAU,EAAAC,UAIbX,CAAAR,EAAAqC","file":"161.753619f3890e9cb3c58c.worker.js","sourcesContent":["Prism.languages[\"markup-templating\"] = {}, Object.defineProperties(Prism.languages[\"markup-templating\"], {\n  buildPlaceholders: {\n    value: function value(e, t, n, a) {\n      e.language === t && (e.tokenStack = [], e.code = e.code.replace(n, function (n) {\n        if (\"function\" == typeof a && !a(n)) return n;\n\n        for (var r = e.tokenStack.length; -1 !== e.code.indexOf(\"___\" + t.toUpperCase() + r + \"___\");) {\n          ++r;\n        }\n\n        return e.tokenStack[r] = n, \"___\" + t.toUpperCase() + r + \"___\";\n      }), e.grammar = Prism.languages.markup);\n    }\n  },\n  tokenizePlaceholders: {\n    value: function value(e, t) {\n      if (e.language === t && e.tokenStack) {\n        e.grammar = Prism.languages[t];\n\n        var n = 0,\n            a = Object.keys(e.tokenStack),\n            r = function r(o) {\n          if (!(n >= a.length)) for (var i = 0; i < o.length; i++) {\n            var g = o[i];\n\n            if (\"string\" == typeof g || g.content && \"string\" == typeof g.content) {\n              var c = a[n],\n                  s = e.tokenStack[c],\n                  l = \"string\" == typeof g ? g : g.content,\n                  p = l.indexOf(\"___\" + t.toUpperCase() + c + \"___\");\n\n              if (p > -1) {\n                ++n;\n\n                var f,\n                    u = l.substring(0, p),\n                    _ = new Prism.Token(t, Prism.tokenize(s, e.grammar, t), \"language-\" + t, s),\n                    k = l.substring(p + (\"___\" + t.toUpperCase() + c + \"___\").length);\n\n                if (u || k ? (f = [u, _, k].filter(function (e) {\n                  return !!e;\n                }), r(f)) : f = _, \"string\" == typeof g ? Array.prototype.splice.apply(o, [i, 1].concat(f)) : g.content = f, n >= a.length) break;\n              }\n            } else g.content && \"string\" != typeof g.content && r(g.content);\n          }\n        };\n\n        r(e.tokens);\n      }\n    }\n  }\n});"],"sourceRoot":""}