{"version":3,"sources":["../node_modules/prismjs/components/prism-asciidoc.js"],"names":["Prism","attributes","pattern","lookbehind","inside","quoted","punctuation","interpreted","string","variable","operator","attr-value","languages","asciidoc","comment-block","alias","table","specifiers","passthrough-block","literal-block","other-block","list-punctuation","list-label","indented-block","comment","title","attribute-entry","hr","page-break","admonition","callout","macro","function","inline","url","attribute-ref","italic","bold","replacement","entity","line-continuation","rest","hooks","add","env","type","content","replace"],"mappings":"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","file":"16.753619f3890e9cb3c58c.worker.js","sourcesContent":["(function (Prism) {\n  var attributes = {\n    pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n    lookbehind: true,\n    inside: {\n      'quoted': {\n        pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        inside: {\n          'punctuation': /^[$`]|[$`]$/\n        }\n      },\n      'interpreted': {\n        pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n        inside: {\n          'punctuation': /^'|'$/ // See rest below\n\n        }\n      },\n      'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      'variable': /\\w+(?==)/,\n      'punctuation': /^\\[|\\]$|,/,\n      'operator': /=/,\n      // The negative look-ahead prevents blank matches\n      'attr-value': /(?!^\\s+$).+/\n    }\n  };\n  Prism.languages.asciidoc = {\n    'comment-block': {\n      pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n      alias: 'comment'\n    },\n    'table': {\n      pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n      inside: {\n        'specifiers': {\n          pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n          alias: 'attr-value'\n        },\n        'punctuation': {\n          pattern: /(^|[^\\\\])[|!]=*/,\n          lookbehind: true // See rest below\n\n        }\n      }\n    },\n    'passthrough-block': {\n      pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^\\++|\\++$/ // See rest below\n\n      }\n    },\n    // Literal blocks and listing blocks\n    'literal-block': {\n      pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n      }\n    },\n    // Sidebar blocks, quote blocks, example blocks and open blocks\n    'other-block': {\n      pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n      }\n    },\n    // list-punctuation and list-label must appear before indented-block\n    'list-punctuation': {\n      pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list-label': {\n      pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    'indented-block': {\n      pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n      lookbehind: true\n    },\n    'comment': /^\\/\\/.*/m,\n    'title': {\n      pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n      alias: 'important',\n      inside: {\n        'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n      }\n    },\n    'attribute-entry': {\n      pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n      alias: 'tag'\n    },\n    'attributes': attributes,\n    'hr': {\n      pattern: /^'{3,}$/m,\n      alias: 'punctuation'\n    },\n    'page-break': {\n      pattern: /^<{3,}$/m,\n      alias: 'punctuation'\n    },\n    'admonition': {\n      pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n      alias: 'keyword'\n    },\n    'callout': [{\n      pattern: /(^[ \\t]*)<?\\d*>/m,\n      lookbehind: true,\n      alias: 'symbol'\n    }, {\n      pattern: /<\\d+>/,\n      alias: 'symbol'\n    }],\n    'macro': {\n      pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n      inside: {\n        'function': /^[a-z\\d-]+(?=:)/,\n        'punctuation': /^::?/,\n        'attributes': {\n          pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n          inside: attributes.inside\n        }\n      }\n    },\n    'inline': {\n      /*\n      The initial look-behind prevents the highlighting of escaped quoted text.\n      \tQuoted text can be multi-line but cannot span an empty line.\n      All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n      \tFirst, we handle the constrained quotes.\n      Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n      They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n      \tThen we handle the unconstrained quotes.\n      Those do not have the restrictions of the constrained quotes.\n      They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n       */\n      pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n      lookbehind: true,\n      inside: {\n        'attributes': attributes,\n        'url': {\n          pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n          inside: {\n            'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n          }\n        },\n        'attribute-ref': {\n          pattern: /^\\{.+\\}$/,\n          inside: {\n            'variable': {\n              pattern: /(^\\{)[a-z\\d,+_-]+/,\n              lookbehind: true\n            },\n            'operator': /^[=?!#%@$]|!(?=[:}])/,\n            'punctuation': /^\\{|\\}$|::?/\n          }\n        },\n        'italic': {\n          pattern: /^(['_])[\\s\\S]+\\1$/,\n          inside: {\n            'punctuation': /^(?:''?|__?)|(?:''?|__?)$/\n          }\n        },\n        'bold': {\n          pattern: /^\\*[\\s\\S]+\\*$/,\n          inside: {\n            punctuation: /^\\*\\*?|\\*\\*?$/\n          }\n        },\n        'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n      }\n    },\n    'replacement': {\n      pattern: /\\((?:C|TM|R)\\)/,\n      alias: 'builtin'\n    },\n    'entity': /&#?[\\da-z]{1,8};/i,\n    'line-continuation': {\n      pattern: /(^| )\\+$/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n  attributes.inside['interpreted'].inside.rest = {\n    'macro': Prism.languages.asciidoc['macro'],\n    'inline': Prism.languages.asciidoc['inline'],\n    'replacement': Prism.languages.asciidoc['replacement'],\n    'entity': Prism.languages.asciidoc['entity']\n  };\n  Prism.languages.asciidoc['passthrough-block'].inside.rest = {\n    'macro': Prism.languages.asciidoc['macro']\n  };\n  Prism.languages.asciidoc['literal-block'].inside.rest = {\n    'callout': Prism.languages.asciidoc['callout']\n  };\n  Prism.languages.asciidoc['table'].inside.rest = {\n    'comment-block': Prism.languages.asciidoc['comment-block'],\n    'passthrough-block': Prism.languages.asciidoc['passthrough-block'],\n    'literal-block': Prism.languages.asciidoc['literal-block'],\n    'other-block': Prism.languages.asciidoc['other-block'],\n    'list-punctuation': Prism.languages.asciidoc['list-punctuation'],\n    'indented-block': Prism.languages.asciidoc['indented-block'],\n    'comment': Prism.languages.asciidoc['comment'],\n    'title': Prism.languages.asciidoc['title'],\n    'attribute-entry': Prism.languages.asciidoc['attribute-entry'],\n    'attributes': Prism.languages.asciidoc['attributes'],\n    'hr': Prism.languages.asciidoc['hr'],\n    'page-break': Prism.languages.asciidoc['page-break'],\n    'admonition': Prism.languages.asciidoc['admonition'],\n    'list-label': Prism.languages.asciidoc['list-label'],\n    'callout': Prism.languages.asciidoc['callout'],\n    'macro': Prism.languages.asciidoc['macro'],\n    'inline': Prism.languages.asciidoc['inline'],\n    'replacement': Prism.languages.asciidoc['replacement'],\n    'entity': Prism.languages.asciidoc['entity'],\n    'line-continuation': Prism.languages.asciidoc['line-continuation']\n  };\n  Prism.languages.asciidoc['other-block'].inside.rest = {\n    'table': Prism.languages.asciidoc['table'],\n    'list-punctuation': Prism.languages.asciidoc['list-punctuation'],\n    'indented-block': Prism.languages.asciidoc['indented-block'],\n    'comment': Prism.languages.asciidoc['comment'],\n    'attribute-entry': Prism.languages.asciidoc['attribute-entry'],\n    'attributes': Prism.languages.asciidoc['attributes'],\n    'hr': Prism.languages.asciidoc['hr'],\n    'page-break': Prism.languages.asciidoc['page-break'],\n    'admonition': Prism.languages.asciidoc['admonition'],\n    'list-label': Prism.languages.asciidoc['list-label'],\n    'macro': Prism.languages.asciidoc['macro'],\n    'inline': Prism.languages.asciidoc['inline'],\n    'replacement': Prism.languages.asciidoc['replacement'],\n    'entity': Prism.languages.asciidoc['entity'],\n    'line-continuation': Prism.languages.asciidoc['line-continuation']\n  };\n  Prism.languages.asciidoc['title'].inside.rest = {\n    'macro': Prism.languages.asciidoc['macro'],\n    'inline': Prism.languages.asciidoc['inline'],\n    'replacement': Prism.languages.asciidoc['replacement'],\n    'entity': Prism.languages.asciidoc['entity']\n  }; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.replace(/&amp;/, '&');\n    }\n  });\n})(Prism);"],"sourceRoot":""}